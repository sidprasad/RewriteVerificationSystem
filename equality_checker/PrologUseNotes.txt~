RWTHREE
Siddhartha Prasad

1. Overview
--------------
rwthree is an equality checking system that, given a set of rewrite
rules, checks if two terms are equal in the specified system. It also provides
a verifiable certificate of the procedure used to determine equality.

The program must be loaded into a Prolog interpreter, along with rewrite rules
as detailed below. It can then be used as follows:

i. If the input terms are provided in linear mathematical notation:
			equal(<Term1>, <Term2>, <Number of Non-Terminating Rules>, Certificate1, 
				Certificate2, Rw (Intermediate to which both expressions are rewritten)).
			
ii. If the input terms are provided as trees:
			equal(<Term1>, <Term2>, Certificate1, Certificate2, 
			Rw (Intermediate to which both expressions are rewritten)).

Certificate1 is a certificate of Term1 = Rw
Certificate2 is a certificate of Term2 = Rw
Rw, Certificate1 and Certificate2 should be Prolog variables.


2. Termination
--------------
It may be the case that certain rules (or pairs of rules) cause the system
to be non-terminating. For example, the pair of rules
		(a + b)*c -> (a*c) + (b*c)
		(a * b) + c -> (a + b) * (a + c)
	does not terminate.

The termination of a system of equations is, in general,
undecidable. Thus, in this case, the number of rules that do not terminate
must be provided to the program. 

3. Representing Rewrite Rules
--------------------------
Rules are specified as prolog predicates, and terms are represented as trees
of the form:
				t((OP,N), L)
			where OP is an operation,
				  N is the number of non-terminating rules
				  L is a list of the proper subterms of the current term

	If a term is a constant or variable, it is of the form
				t(x, [])
	Constants and variables can also be expressed as 'null-ary' operators
	of the form:
				t((OP, N), [])

	If constants are of the form (X,Y), they must be expressed as
	null-ary operators.
			
Terminating rules are expressed as follows:
	%Rule
	1 * X = X
	%Equality Checker 3 representation.
	pred(t(('*', N), [t(1, []), X]), X).
	
Non terminating rules are expressed as follows:
	%Rule
	X + Y = Y + X
	%Equality Checker 3 representation.
	pred( t(('+', N), [X, Y]), t(('+', N_), [Y, X])) :- N > 0, N_ is N-1.
	
4. Building trees
--------------
Equality Checker 3 allows the user the flexibility of providing
input both in the form of trees as specified above and in linear
mathematical notation. In order to express terms linearly the user
 must also provide the program with a way to parse expressions into
and trees, named 'treeify'.

For instance, to parse the operator '+':

		treeify((X + Y), t((+, N), [X_, Y_]), N) :- treeify(X, X_, N),	
							    treeify(Y, Y_, N).
		treeify((X + Y), t((+, _), [X_, Y_])) :- treeify(X, X_),
							 treeify(Y, Y_).
	
		%If constants are treated as null-ary
		%operators
		treeify(X, t((X, N), []), N).
		treeify(X, t(X, _), []).	

		%If not nullary operators
	    	treeify(X, t(X,[]), _).
		treeify(X, t(X,[])).

